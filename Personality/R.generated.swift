//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `personality_test.json`.
    static let personality_testJson = Rswift.FileResource(bundle: R.hostingBundle, name: "personality_test", pathExtension: "json")
    
    /// `bundle.url(forResource: "personality_test", withExtension: "json")`
    static func personality_testJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.personality_testJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `category1`.
    static let category1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "category1")
    /// Image `category2`.
    static let category2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "category2")
    /// Image `category3`.
    static let category3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "category3")
    /// Image `category4`.
    static let category4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "category4")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `ic_ios_blue`.
    static let ic_ios_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ios_blue")
    /// Image `ic_ios_gray`.
    static let ic_ios_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ios_gray")
    /// Image `icon_splash`.
    static let icon_splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_splash")
    
    /// `UIImage(named: "category1", bundle: ..., traitCollection: ...)`
    static func category1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.category1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "category2", bundle: ..., traitCollection: ...)`
    static func category2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.category2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "category3", bundle: ..., traitCollection: ...)`
    static func category3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.category3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "category4", bundle: ..., traitCollection: ...)`
    static func category4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.category4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_ios_blue", bundle: ..., traitCollection: ...)`
    static func ic_ios_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ios_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_ios_gray", bundle: ..., traitCollection: ...)`
    static func ic_ios_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ios_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_splash", bundle: ..., traitCollection: ...)`
    static func icon_splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_splash, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CategoryCollectionViewCellIdentifier`.
    static let categoryCollectionViewCellIdentifier: Rswift.ReuseIdentifier<CategoryCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CategoryCollectionViewCellIdentifier")
    /// Reuse identifier `QuestionTableViewCell`.
    static let questionTableViewCell: Rswift.ReuseIdentifier<QuestionTableViewCell> = Rswift.ReuseIdentifier(identifier: "QuestionTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `CategoriesViewController`, and contains static references to 1 segues.
    struct categoriesViewController {
      /// Segue identifier `goToQuestions`.
      static let goToQuestions: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CategoriesViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "goToQuestions")
      
      /// Optionally returns a typed version of segue `goToQuestions`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToQuestions(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CategoriesViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.categoriesViewController.goToQuestions, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `QuestionViewController`, and contains static references to 3 segues.
    struct questionViewController {
      /// Segue identifier `goToConditionalQuestionViewController`.
      static let goToConditionalQuestionViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, QuestionViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "goToConditionalQuestionViewController")
      /// Segue identifier `goToNextQuestion`.
      static let goToNextQuestion: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, QuestionViewController, QuestionViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToNextQuestion")
      /// Segue identifier `skipCurrentQuestion`.
      static let skipCurrentQuestion: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, QuestionViewController, QuestionViewController> = Rswift.StoryboardSegueIdentifier(identifier: "skipCurrentQuestion")
      
      /// Optionally returns a typed version of segue `goToConditionalQuestionViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToConditionalQuestionViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, QuestionViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.questionViewController.goToConditionalQuestionViewController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `goToNextQuestion`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToNextQuestion(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, QuestionViewController, QuestionViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.questionViewController.goToNextQuestion, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `skipCurrentQuestion`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func skipCurrentQuestion(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, QuestionViewController, QuestionViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.questionViewController.skipCurrentQuestion, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Questions`.
    static let questions = _R.storyboard.questions()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Questions", bundle: ...)`
    static func questions(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.questions)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 5 localization keys.
    struct localizable {
      /// en translation: %d answered
      /// 
      /// Locales: en
      static let categoriesViewControllerTotalQuestionsAnswered = Rswift.StringResource(key: "categoriesViewController.totalQuestionsAnswered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d questions
      /// 
      /// Locales: en
      static let categoriesViewControllerTotalQuestions = Rswift.StringResource(key: "categoriesViewController.totalQuestions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Categories
      /// 
      /// Locales: en
      static let categoriesViewControllerTitle = Rswift.StringResource(key: "categoriesViewController.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Finish
      /// 
      /// Locales: en
      static let finish = Rswift.StringResource(key: "finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Skip this question
      /// 
      /// Locales: en
      static let questionViewControllerSkipThisQuestion = Rswift.StringResource(key: "questionViewController.skipThisQuestion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: %d answered
      /// 
      /// Locales: en
      static func categoriesViewControllerTotalQuestionsAnswered(_ value1: Int) -> String {
        return String(format: NSLocalizedString("categoriesViewController.totalQuestionsAnswered", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %d questions
      /// 
      /// Locales: en
      static func categoriesViewControllerTotalQuestions(_ value1: Int) -> String {
        return String(format: NSLocalizedString("categoriesViewController.totalQuestions", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Categories
      /// 
      /// Locales: en
      static func categoriesViewControllerTitle(_: Void = ()) -> String {
        return NSLocalizedString("categoriesViewController.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Finish
      /// 
      /// Locales: en
      static func finish(_: Void = ()) -> String {
        return NSLocalizedString("finish", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Skip this question
      /// 
      /// Locales: en
      static func questionViewControllerSkipThisQuestion(_: Void = ()) -> String {
        return NSLocalizedString("questionViewController.skipThisQuestion", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try questions.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_splash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "category1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'category1' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct questions: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Questions"
      
      static func validate() throws {
        if UIKit.UIImage(named: "check") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check' is used in storyboard 'Questions', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ios_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ios_gray' is used in storyboard 'Questions', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ios_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ios_blue' is used in storyboard 'Questions', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
